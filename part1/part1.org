* PART 1
* 01-01 - Reading and Plotting Stock Data

Lesson outline
In this lesson you will learn how to read data, select subsets of it and generate useful plots, using pandas and matplotlib.
- http://pandas.pydata.org/
- http://matplotlib.org/

Read stock data from CSV files:

- pandas.DataFrame
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html

- pandas.read_csv
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html

Select desired rows and columns:
- Indexing and Slicing Data
- http://pandas.pydata.org/pandas-docs/stable/indexing.html

- Gotchas: Label-based slicing conventions
- http://pandas.pydata.org/pandas-docs/stable/gotchas.html?#label-based-slicing-conventions

Visualize data by generating plots:
- Plotting
- http://pandas.pydata.org/pandas-docs/stable/visualization.html

- pandas.DataFrame.plot
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html

- matplotlib.pyplot.plot
- http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot

** Real stock data

Date, Open, High, Low, Close, Volume, Adj Close

Close == Actual Close
Adj Close == Provided by the data provider, takes into account splits and dividend

Date sort desc. Newest at top moves down to the past

** Pandas dataframe

Symbols along the top. 
Date the first column with date moving down and up through time. Date ascending

Rows contain the data values. NaN is not a number (Python's name for null)

Three dimensional. Stcked cards where each has a different data value
Close, Volume, AdjClose etc

** Reading a CSV

- ./env/lib/python2.7/site-packages/QSTK/QSData/Yahoo/AAPL.csv

* 01-02 - Working with multiple stocks

Lesson outline
Here's an overview of what you'll learn to do in this lesson.

Read in multiple stocks:

Create an empty pandas.DataFrame with dates as index: pandas.date_range
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html

Drop missing date rows: pandas.DataFrame.dropna
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html

Incrementally join data for each stock: pandas.DataFrame.join
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html

Manipulate stock data:

Index and select data by row (dates) and column (symbols)
- http://pandas.pydata.org/pandas-docs/stable/indexing.html
Plot multiple stocks at once (still using pandas.DataFrame.plot)
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html
Carry out arithmetic operations across stocks


** Problems to solve with dataframe

- date ranges
- multiple stocks
- align dates
- proper date order
  
** join
- dates which are in both dataframes
  

- Types of join
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html



** Obtaining a slice of data


** Slicing Data

# Slice by row range (dates) using DataFrame.ix[] selector
df2 = df1.ix[start_date:end_date]

# Column slicing
df[['IBM','GLD']]

# Both
df1.ix['2010-01-01': '2010-01-31', ['IBM','GLD']]


** Plotting

Hard to compare when the prices are so far apart
Would be nice to start all at the same price.

Normalize the start price to 1.0

df2 = df1/df1.ix[0]
or
df2 = df1/df1.ix[0, :]


Carly Fiorina was named "the most powerful woman in business" by Forbes in 1998, while at AT&T/Lucent. 
She was the CEO of HP from 1999-2005, and has held several leadership positions at technology firms and business institutes.

Listen to her talk about The Importance of Selective Information as part of Stanford's Entrepreneurial Thought Leaders Lecture series [full podcast].
http://ecorner.stanford.edu/authorMaterialInfo.html?mid=1716
http://ecorner.stanford.edu/authorMaterialInfo.html?mid=1679

Some of her popular quotes can be found here.
http://thinkexist.com/quotes/carly_fiorina/


** Lesson summary
To read multiple stocks into a single dataframe, you need to:

Specify a set of dates using pandas.date_range
    -  http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html
Create an empty dataframe with dates as index
    This helps align stock data and orders it by trading date

Read in a reference stock (here SPY) and drop non-trading days using pandas.DataFrame.dropna
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html

Incrementally join dataframes using pandas.DataFrame.join
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html


Once you have multiple stocks, you can:

Select a subset of stocks by ticker symbols
Slice by row (dates) and column (symbols)
Plot multiple stocks at once (still using pandas.DataFrame.plot)
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html
Carry out arithmetic operations across stocks, e.g. normalize by the first day's price

* 01-03 - NumPy
Matrices which are  NDArrys


Lesson outline
If you're familiar with NumPy (esp. the following operations), feel free to skim through this lesson.

Create a NumPy array:
    from a pandas dataframe: pandas.DataFrame.values
        - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html
    from a Python sequence: numpy.array
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html
    with constant initial values: numpy.ones, numpy.zeros
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html
    with random values: numpy.random
        - http://docs.scipy.org/doc/numpy/reference/routines.random.html
Access array attributes: shape, ndim, size, dtype
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ndim.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.size.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.dtype.html
Compute statistics: sum, min, max, mean
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.min.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.max.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html
Carry out arithmetic operations: add, subtract, multiply, divide
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.subtract.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html
Measure execution time: time.time, profile
    - https://docs.python.org/2/library/time.html#time.time
    - https://docs.python.org/2/library/profile.html
Manipulate array elements: Using simple indices and slices, integer arrays, boolean arrays
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing-and-indexing
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#boolean-array-indexing


** Relationship to Pandas
- Wrapper for numerical libraries
- Pandas is a wrapper for NumPy

- The inside part is a ndarray
- nd1 = df1.values

** Nodes on notation

- nd1[row, col]      # 0-based

- nd1[0, ]

- colon syntax is for ranges
- nd1[0-3, 1:3]     # rows 0, 1, 2 and columns 1, 2, the last value is one past the included set

- nd1[:, 3]         # all rows, column 3

- nd1[-1,1:3]           # Last row columns 1 and 2

** Quiz

- nd1[0:2, 0:2] = nd2[-2, 2:4]

** Indexing

- https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html

** Arithmetic Operations

NumPy Reference: Arithmetic operations

- numpy.add: Element-wise addition, same as + operator
- numpy.subtract: Element-wise subtraction, same as -
- numpy.multiply: Element-wise multiplication, same as *
- numpy.divide: Element-wise division, same as /
- numpy.dot: Dot product (1D arrays), matrix multiplication (2D)


** Learning more NumPy

Resources from NumPy User Guide and Reference:
    - http://docs.scipy.org/doc/numpy/user/index.html
    - http://docs.scipy.org/doc/numpy/reference/index.html

The N-dimensional array
    - http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html 
Data types
    - http://docs.scipy.org/doc/numpy/user/basics.types.html
Array creation [more]
    - http://docs.scipy.org/doc/numpy/user/basics.creation.html
    - http://docs.scipy.org/doc/numpy/reference/routines.array-creation.html
Indexing [more]
    - http://docs.scipy.org/doc/numpy/user/basics.indexing.html
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html
Broadcasting
    - http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html
Random sampling
    - http://docs.scipy.org/doc/numpy/reference/routines.random.html
Mathematical functions
    - http://docs.scipy.org/doc/numpy/reference/routines.math.html
Linear algebra
    - http://docs.scipy.org/doc/numpy/reference/routines.linalg.html
* 01-04 - Statistical Analysis

Pandas makes it very convenient to compute various statistics on a dataframe:

Global statistics: mean, median, std, sum, etc. [more]
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.median.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.std.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sum.html
    - http://pandas.pydata.org/pandas-docs/stable/api.html#api-dataframe-stats
Rolling statistics: rolling_mean, rolling_std, etc. [more]
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_mean.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_std.html
    - http://pandas.pydata.org/pandas-docs/stable/computation.html?highlight=rolling%20statistics#moving-rolling-statistics-moments


You will use these functions to analyze stock movement over time.

Specifically, you will compute:

Bollinger Bands: A way of quantifying how far stock price has deviated from some norm.
Daily returns: Day-to-day change in stock price.

** Global Statistics 

33 global statistics
- mean
- median
- std
- sum
- prod
- mode
- ...

stat = df1.mean()

** Rolling Mean

20 day window
mean
Move over one day
Repeat

Lagging

A simple moving average
Look at where the price crosses the moving average

** Quiz
How to tell when to look at a deviation is worth looking at

Rolling standard deviation

** Bollinger Bands

Look at the recent violtility of the stock

2 standard deviations above and below the rolling mean

2 sigma away from the mean are things to notice

When the price crosses the band and returns back is potentially a trading signal

** Computing Rolling Statistics

pandas.stats.moments.rolling_mean

- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_mean.html
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_std.html
- http://pandas.pydata.org/pandas-docs/stable/computation.html?highlight=rolling%20statistics#moving-rolling-statistics-moments


** Daily Returns

How much did a price go up or down on a given day

daily_ret[t] = (price[t]/price[t-1]) - 1


Daily return vs Time
Zig zags
Take the mean and observe

Compare stocks daily return vs SPY or others


** Cumulative returns


cum_ret[t] = (price[t]/price[0]) - 1


