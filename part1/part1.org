* PART 1
- https://www.udacity.com/course/machine-learning-for-trading--ud501
* 01-01 - Reading and Plotting Stock Data

Lesson outline
In this lesson you will learn how to read data, select subsets of it and generate useful plots, using pandas and matplotlib.
- http://pandas.pydata.org/
- http://matplotlib.org/

Read stock data from CSV files:

- pandas.DataFrame
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html

- pandas.read_csv
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html

Select desired rows and columns:
- Indexing and Slicing Data
- http://pandas.pydata.org/pandas-docs/stable/indexing.html

- Gotchas: Label-based slicing conventions
- http://pandas.pydata.org/pandas-docs/stable/gotchas.html?#label-based-slicing-conventions

Visualize data by generating plots:
- Plotting
- http://pandas.pydata.org/pandas-docs/stable/visualization.html

- pandas.DataFrame.plot
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html

- matplotlib.pyplot.plot
- http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot

** Real stock data

Date, Open, High, Low, Close, Volume, Adj Close

Close == Actual Close
Adj Close == Provided by the data provider, takes into account splits and dividend

Date sort desc. Newest at top moves down to the past

** Pandas dataframe

Symbols along the top. 
Date the first column with date moving down and up through time. Date ascending

Rows contain the data values. NaN is not a number (Python's name for null)

Three dimensional. Stcked cards where each has a different data value
Close, Volume, AdjClose etc

** Reading a CSV

- ./env/lib/python2.7/site-packages/QSTK/QSData/Yahoo/AAPL.csv

* 01-02 - Working with multiple stocks

Lesson outline
Here's an overview of what you'll learn to do in this lesson.

Read in multiple stocks:

Create an empty pandas.DataFrame with dates as index: pandas.date_range
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html

Drop missing date rows: pandas.DataFrame.dropna
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html

Incrementally join data for each stock: pandas.DataFrame.join
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html

Manipulate stock data:

Index and select data by row (dates) and column (symbols)
- http://pandas.pydata.org/pandas-docs/stable/indexing.html
Plot multiple stocks at once (still using pandas.DataFrame.plot)
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html
Carry out arithmetic operations across stocks


** Problems to solve with dataframe

- date ranges
- multiple stocks
- align dates
- proper date order
  
** join
- dates which are in both dataframes
  

- Types of join
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html



** Obtaining a slice of data


** Slicing Data

# Slice by row range (dates) using DataFrame.ix[] selector
df2 = df1.ix[start_date:end_date]

# Column slicing
df[['IBM','GLD']]

# Both
df1.ix['2010-01-01': '2010-01-31', ['IBM','GLD']]


** Plotting

Hard to compare when the prices are so far apart
Would be nice to start all at the same price.

Normalize the start price to 1.0

df2 = df1/df1.ix[0]
or
df2 = df1/df1.ix[0, :]


Carly Fiorina was named "the most powerful woman in business" by Forbes in 1998, while at AT&T/Lucent. 
She was the CEO of HP from 1999-2005, and has held several leadership positions at technology firms and business institutes.

Listen to her talk about The Importance of Selective Information as part of Stanford's Entrepreneurial Thought Leaders Lecture series [full podcast].
http://ecorner.stanford.edu/authorMaterialInfo.html?mid=1716
http://ecorner.stanford.edu/authorMaterialInfo.html?mid=1679

Some of her popular quotes can be found here.
http://thinkexist.com/quotes/carly_fiorina/


** Lesson summary
To read multiple stocks into a single dataframe, you need to:

Specify a set of dates using pandas.date_range
    -  http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html
Create an empty dataframe with dates as index
    This helps align stock data and orders it by trading date

Read in a reference stock (here SPY) and drop non-trading days using pandas.DataFrame.dropna
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html

Incrementally join dataframes using pandas.DataFrame.join
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html


Once you have multiple stocks, you can:

Select a subset of stocks by ticker symbols
Slice by row (dates) and column (symbols)
Plot multiple stocks at once (still using pandas.DataFrame.plot)
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html
Carry out arithmetic operations across stocks, e.g. normalize by the first day's price

* 01-03 - NumPy
Matrices which are  NDArrys


Lesson outline
If you're familiar with NumPy (esp. the following operations), feel free to skim through this lesson.

Create a NumPy array:
    from a pandas dataframe: pandas.DataFrame.values
        - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html
    from a Python sequence: numpy.array
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html
    with constant initial values: numpy.ones, numpy.zeros
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html
        - http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html
    with random values: numpy.random
        - http://docs.scipy.org/doc/numpy/reference/routines.random.html
Access array attributes: shape, ndim, size, dtype
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ndim.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.size.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.dtype.html
Compute statistics: sum, min, max, mean
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.min.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.max.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html
Carry out arithmetic operations: add, subtract, multiply, divide
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.subtract.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html
    - http://docs.scipy.org/doc/numpy/reference/generated/numpy.divide.html
Measure execution time: time.time, profile
    - https://docs.python.org/2/library/time.html#time.time
    - https://docs.python.org/2/library/profile.html
Manipulate array elements: Using simple indices and slices, integer arrays, boolean arrays
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing-and-indexing
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#boolean-array-indexing


** Relationship to Pandas
- Wrapper for numerical libraries
- Pandas is a wrapper for NumPy

- The inside part is a ndarray
- nd1 = df1.values

** Nodes on notation

- nd1[row, col]      # 0-based

- nd1[0, ]

- colon syntax is for ranges
- nd1[0-3, 1:3]     # rows 0, 1, 2 and columns 1, 2, the last value is one past the included set

- nd1[:, 3]         # all rows, column 3

- nd1[-1,1:3]           # Last row columns 1 and 2

** Quiz

- nd1[0:2, 0:2] = nd2[-2, 2:4]

** Indexing

- https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html

** Arithmetic Operations

NumPy Reference: Arithmetic operations

- numpy.add: Element-wise addition, same as + operator
- numpy.subtract: Element-wise subtraction, same as -
- numpy.multiply: Element-wise multiplication, same as *
- numpy.divide: Element-wise division, same as /
- numpy.dot: Dot product (1D arrays), matrix multiplication (2D)


** Learning more NumPy

Resources from NumPy User Guide and Reference:
    - http://docs.scipy.org/doc/numpy/user/index.html
    - http://docs.scipy.org/doc/numpy/reference/index.html

The N-dimensional array
    - http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html 
Data types
    - http://docs.scipy.org/doc/numpy/user/basics.types.html
Array creation [more]
    - http://docs.scipy.org/doc/numpy/user/basics.creation.html
    - http://docs.scipy.org/doc/numpy/reference/routines.array-creation.html
Indexing [more]
    - http://docs.scipy.org/doc/numpy/user/basics.indexing.html
    - http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html
Broadcasting
    - http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html
Random sampling
    - http://docs.scipy.org/doc/numpy/reference/routines.random.html
Mathematical functions
    - http://docs.scipy.org/doc/numpy/reference/routines.math.html
Linear algebra
    - http://docs.scipy.org/doc/numpy/reference/routines.linalg.html
* 01-04 - Statistical Analysis

Pandas makes it very convenient to compute various statistics on a dataframe:

Global statistics: mean, median, std, sum, etc. [more]
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.median.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.std.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sum.html
    - http://pandas.pydata.org/pandas-docs/stable/api.html#api-dataframe-stats
Rolling statistics: rolling_mean, rolling_std, etc. [more]
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_mean.html
    - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_std.html
    - http://pandas.pydata.org/pandas-docs/stable/computation.html?highlight=rolling%20statistics#moving-rolling-statistics-moments


You will use these functions to analyze stock movement over time.

Specifically, you will compute:

Bollinger Bands: A way of quantifying how far stock price has deviated from some norm.
Daily returns: Day-to-day change in stock price.

** Global Statistics 

33 global statistics
- mean
- median
- std
- sum
- prod
- mode
- ...

stat = df1.mean()

** Rolling Mean

20 day window
mean
Move over one day
Repeat

Lagging

A simple moving average
Look at where the price crosses the moving average

** Quiz
How to tell when to look at a deviation is worth looking at

Rolling standard deviation

** Bollinger Bands

Look at the recent violtility of the stock

2 standard deviations above and below the rolling mean

2 sigma away from the mean are things to notice

When the price crosses the band and returns back is potentially a trading signal

** Computing Rolling Statistics

pandas.stats.moments.rolling_mean

- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_mean.html
- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.rolling_std.html
- http://pandas.pydata.org/pandas-docs/stable/computation.html?highlight=rolling%20statistics#moving-rolling-statistics-moments

** Daily Returns

How much did a price go up or down on a given day

daily_ret[t] = (price[t]/price[t-1]) - 1


Daily return vs Time
Zig zags
Take the mean and observe

Compare stocks daily return vs SPY or others

** Cumulative returns

cum_ret[t] = (price[t]/price[0]) - 1


** Bollinger Bands - Notes
- https://www.linkedin.com/pulse/qb4-bollinger-bands-rolling-mean-standard-deviation-alan-mcdowell
- http://stackoverflow.com/questions/40742364/pandas-rolling-standard-deviation
- https://www.oanda.com/forex-trading/learn/technical-analysis-for-traders/bollinger-bands/standard-deviations
- http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:bollinger_bands
- 
* 01-05 - Missing Data

** Pristine Data


** Data goes missing

See symbol JAVA
Was Mr Coffee
Then Sun Microsystems
No long

** What can we do

- fill forward to fill in gaps


** Pandas fillna

- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html


- fillna(method='ffill')

* 01-06 - Histograms and Scatterplots

** A closer look at daily returns

Daily return chart
Price change % per day
Daily Ret vs Time

** Histogram

Occurrances into buckets

Histogram of stockmarket over long period of time looks like a bell curve. Gaussian or normal distribution


- Mean
- Standard Deviation (variace from mean)
- Kurtosis
  - tails
  - how much your chart differs from 'nomal gaussian' distribution
  - fat tails (positive), more occurances in tails
  - negative kurtosis, few occurances
    


** Scatterplots

Linear regression to fit a line to the scatter plot

- Slope
  - Beta
  - How reactive is the stock to the mark

  - Slope == 1
    - The stock moves with the market

  - Higher number
    - The stock moves more than the market

- Intercept vertica axis
  - Alpha
    - If positive returns more than the market

** Slope is not correlation

- Correlation is a meaure how tightly the points fit the line
  - Thinner cloud is tighter

  - 0 is not correlated at all
  - 1 is highly correlated

** Real world

Daily returns for stocks and the market look like a Gaussian
If they where really Guassian we'd say they were normally distributed
  
This is dangerous be it ignores kurtosis, or the probability in the tails

* 01-07 - Sharpe ratio and other portfolio statistics

Portfolio
- Allocation of funds to a set of stocks

** Daily portfolio values

allocs = [04, 0.4, 0.1, 0.1]

- Prices
  - prices

- Normalizd proces
  - Normalize to the first day
  - normalized = prices/prices[0]
  - Prices will all start at 1.0
  - normed = prices / prices[0]

- Allocation
  - Multiply each by it's allocation
  - alloced = normed * allocs

- Position values
  - First row is how much you started with
  - pos_vals = alloced * start_val

- Portfolio value
  - Sum across each day
  - port_val = pos_vals.sum(axis=1)

** Daily returns

- First value is zero
- Exclude that value from calculations on dataily _returns

daily_rets = daily_rets[1:]

- Four key statistics

- Cumulative Return
  - How much has the value of the portfolio gone up since the beginning
- Average Daily Return
  - Average (mean) of each daily return
- Standard Deviation of Daily Return
  - Standard deviation of each of the daily runs
    - Risk or volitility
- Sharpe Ratio
  - Risk adjusted return

** Sharpe Ratio

- All else being equal
- Lower risk is better
- Higher return is better

- Also, considered is
- the risk free rate of return

William Sharpe

The value of a portfolio is directly proportional to the return it
generates over some baseline (here risk-free rate), and inversely
proportional to its volatility.



** Calculating the Sharpe Ratio

S = E[Rp - Rf] / std[Rp - Rf]

Ex ante formulation
Expected
Forward looking

S = mean(daily_rets - daily_rf) / std(daily_rets - daily_rf)


daily_rf
- LIBOR
- 3 month T-bill
- 0%


Traditional shortcut
10% per year
0.1
1.0 + 0.1

What is the rate per day

daily_rf = 252nd root of 1.0. + 0.1 - 1 = daily risk free root


daily_rf does fluctate but in effect it is constant. With that the std
of a number minus a constant is the same as the std of the number.


S = mean(daily_rets - daily_rf) / std(daily_rets)

** More on Sharpe ratio

- Changes depending on sampling (annually, monthly, daily, etc)
- Originally thought of for an annual number

- SR annualized = K * SR
- K = sqrt( samples per year)

- daily K = sqrt(252)
- meekly k = sqrt(52)
- monthly k = sqrt(12)

SR = sqrt(252) * mean(daily_rets * daily_rf) / std(daily_rets)


** Quiz: What Is The Sharpe Ratio?

60 days of data
avg daily ret = 10 bps = 0.001 per day
daily risk free = 2 bps = 0.0002
std daily ret = 10 bps = 0.001

bip = 1/10 of a 1 percent = 1/10 * .01 = .001


Recall the formula for computing Sharpe ratio:

k * mean(daily_rets_ - _daily_rf) / std(daily_rets)
where k = sqrt(252) for daily sampling.


= sqrt(252) * mean(0.001 - 0.0002) / std(.001)

** Assigment

Write a function to calculate the following for a portfolio:

1. Cumulative Return
2. Average daily return
3. Risk (Std deviation)
4. Sharpe ratio

* 01-08 - Optimizers: Building a parameterized model
** What is an optimizer?
Algorith that can do:

- Find minimum values for functions
  - f(x) - x^2 + x^3 + 5
  - For what value of x is this function minimized
- Build parameterized models based on data
- Refine allocations for stocks in a portfolios

How to use an optimizer

1. Provide a function to minimize
   - Define in Python
2. Provide an initial guess
3. Call the optimizer

** Gradient Descent

https://en.wikipedia.org/wiki/Gradient_descent

import scipy.optimize as spo
min_result = spo.minimize(f, Xguess, method='SLSQP', options={'disp': True})

** How to defeat a minimizer

- http://www.scipy-lectures.org/advanced/mathematical_optimization/


Functions with multiple minima, any discontinuities or zero slope will
be hard for our minimizer.

** Convex Problems

- The easiest type of function for an optimizer to solve for
- Has only one local minima


- https://en.wikipedia.org/wiki/Convex_function
- https://en.wikipedia.org/wiki/Convex_function#/media/File:ConvexFunction.svg

Functions with multiple minima, any discontinuities or zero slope will
be hard for our minimizer.

** Building a parameerized model

f(x) = mx + b

f(x) = c0 * x + c1

c0 = coefficient 0 is the slope
c1 = coefficient 1 is the y intercept

What are we trying to minimize?

Observe how far each point is away from the line. Call these differences e0, e1, ...
E stands for error

Sum(abs(eN)) or Sum(e^^2)


** Minimier finds coefficients

Guess c0 = 1 and c1 = 0
Figure the errors

Re-try with new c values
Figure the errors

Repeat until lowest errors values


** Works with polynomials
- See https://discussions.udacity.com/t/where-can-i-find-the-code-lines-not-shown-in-class/47593
* 01-09 - Optimizers: How to optimize a portfolio
** What is portfolio optimization

Final Assignment: Build a portfolio optimizer

Fiven a set of assets and time period find a allocation of funds to assets that maximizes performance

What is performance?

Cumulative return   - Maximimize Return
Volitity or risk    - Minimize Risk 
Risk adjuted return (Sharpe Ratio) - Maximize Sharpe Ratio

See:
- http://quantsoftware.gatech.edu/CS7646_Spring_2017#Assignments
- http://quantsoftware.gatech.edu/Machine_Learning_for_Trading_Course
- http://quantsoftware.gatech.edu/MC1-Project-1
- http://quantsoftware.gatech.edu/MC1-Project-2

** Using an minimizer to optimize a portfolio

Portfolio

2010

.25 GOOG
.25 AAPL
.25 GLD
.25 XOM

Graph Portfolio vs SPY

Optimize for Sharpe Ratio


.00 GOOG
.40 AAPL
.60 GLD
.00 XOM

Graph Portfolio vs SPY

** Framing the proglem

- Provide a function to minimize f(x)
- provide an initial guess for X
- Call the optimizer

X == allocations

We want the largest the Sharpe Ratio.
So, the function f is the -1 * the Sharpe Ratio.
We multiple by -1 to get the maximum. If we didn't we'd minimze and get the smallest Sharpe Ratio

** Ranges and constraints

- Ranges: Limits on values for X
  - This makes the process faster
  - Only focus on values in the range of 0 to 1. Prevent 200% allocations

- Constraints: Porperties of X that must be "true"
  - For example, the sum of abs(X) = 1.0
  - Our total allocation must add up to 100%

    
